// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Content /> should render without crashing 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <Register
    RegisterUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": Register {
      "_reactInternalFiber": FiberNode {
        "_debugID": 50,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "RegisterUser": [MockFunction],
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "RegisterUser": [MockFunction],
            },
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login-form"
                  >
                    <form>
                      <div
                        class="top"
                      >
                        <h3>
                          Register User
                        </h3>
                      </div>
                      <div
                        class="form-area"
                      >
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="fullname"
                            placeholder="Names"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="username"
                            placeholder="Username"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />
                        </div>
                        <button
                          class="btn btn-default btn-block"
                          type="submit"
                        >
                          Save
                        </button>
                      </div>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "RegisterUser": [MockFunction],
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "RegisterUser": [MockFunction],
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "RegisterUser": [MockFunction],
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="login-form"
                >
                  <form>
                    <div
                      class="top"
                    >
                      <h3>
                        Register User
                      </h3>
                    </div>
                    <div
                      class="form-area"
                    >
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="fullname"
                          placeholder="Names"
                          required=""
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="username"
                          placeholder="Username"
                          required=""
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="email"
                          placeholder="Email"
                          required=""
                          type="email"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="password"
                          placeholder="Password"
                          required=""
                          type="password"
                          value=""
                        />
                      </div>
                      <button
                        class="btn btn-default btn-block"
                        type="submit"
                      >
                        Save
                      </button>
                    </div>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "RegisterUser": [MockFunction],
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "RegisterUser": [MockFunction],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login-form"
                  >
                    <form>
                      <div
                        class="top"
                      >
                        <h3>
                          Register User
                        </h3>
                      </div>
                      <div
                        class="form-area"
                      >
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="fullname"
                            placeholder="Names"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="username"
                            placeholder="Username"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />
                        </div>
                        <button
                          class="btn btn-default btn-block"
                          type="submit"
                        >
                          Save
                        </button>
                      </div>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "RegisterUser": [MockFunction],
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "RegisterUser": [MockFunction],
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "RegisterUser": [MockFunction],
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="login-form"
                >
                  <form>
                    <div
                      class="top"
                    >
                      <h3>
                        Register User
                      </h3>
                    </div>
                    <div
                      class="form-area"
                    >
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="fullname"
                          placeholder="Names"
                          required=""
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="username"
                          placeholder="Username"
                          required=""
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="email"
                          placeholder="Email"
                          required=""
                          type="email"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="password"
                          placeholder="Password"
                          required=""
                          type="password"
                          value=""
                        />
                      </div>
                      <button
                        class="btn btn-default btn-block"
                        type="submit"
                      >
                        Save
                      </button>
                    </div>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "RegisterUser": [MockFunction],
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 51,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 52,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 53,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 55,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": "h3",
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "Register User",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "Register User",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <h3>
                  Register User
                </h3>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "h3",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": "div",
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": <h3>
                  Register User
                </h3>,
                "className": "top",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": <h3>
                  Register User
                </h3>,
                "className": "top",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugID": 54,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 61,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "elementType": "input",
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "className": "form-control",
                      "name": "fullname",
                      "onChange": [Function],
                      "placeholder": "Names",
                      "required": true,
                      "type": "text",
                      "value": "",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "className": "form-control",
                      "name": "fullname",
                      "onChange": [Function],
                      "placeholder": "Names",
                      "required": true,
                      "type": "text",
                      "value": "",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": <input
                      class="form-control"
                      name="fullname"
                      placeholder="Names"
                      required=""
                      type="text"
                      value=""
                    />,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "input",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": <input
                      className="form-control"
                      name="fullname"
                      onChange={[Function]}
                      placeholder="Names"
                      required={true}
                      type="text"
                      value=""
                    />,
                    "className": "group",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": <input
                      className="form-control"
                      name="fullname"
                      onChange={[Function]}
                      placeholder="Names"
                      required={true}
                      type="text"
                      value=""
                    />,
                    "className": "group",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 57,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 62,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "elementType": "input",
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "form-control",
                        "name": "username",
                        "onChange": [Function],
                        "placeholder": "Username",
                        "required": true,
                        "type": "text",
                        "value": "",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "form-control",
                        "name": "username",
                        "onChange": [Function],
                        "placeholder": "Username",
                        "required": true,
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <input
                        class="form-control"
                        name="username"
                        placeholder="Username"
                        required=""
                        type="text"
                        value=""
                      />,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <input
                        className="form-control"
                        name="username"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                        type="text"
                        value=""
                      />,
                      "className": "group",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <input
                        className="form-control"
                        name="username"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                        type="text"
                        value=""
                      />,
                      "className": "group",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 58,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 63,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "elementType": "input",
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "className": "form-control",
                          "name": "email",
                          "onChange": [Function],
                          "placeholder": "Email",
                          "required": true,
                          "type": "email",
                          "value": "",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "className": "form-control",
                          "name": "email",
                          "onChange": [Function],
                          "placeholder": "Email",
                          "required": true,
                          "type": "email",
                          "value": "",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <input
                          class="form-control"
                          name="email"
                          placeholder="Email"
                          required=""
                          type="email"
                          value=""
                        />,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <input
                          className="form-control"
                          name="email"
                          onChange={[Function]}
                          placeholder="Email"
                          required={true}
                          type="email"
                          value=""
                        />,
                        "className": "group",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <input
                          className="form-control"
                          name="email"
                          onChange={[Function]}
                          placeholder="Email"
                          required={true}
                          type="email"
                          value=""
                        />,
                        "className": "group",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 59,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 64,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "elementType": "input",
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "className": "form-control",
                            "name": "password",
                            "onChange": [Function],
                            "placeholder": "Password",
                            "required": true,
                            "type": "password",
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "className": "form-control",
                            "name": "password",
                            "onChange": [Function],
                            "placeholder": "Password",
                            "required": true,
                            "type": "password",
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 3,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Password"
                            required={true}
                            type="password"
                            value=""
                          />,
                          "className": "group",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": <input
                            className="form-control"
                            name="password"
                            onChange={[Function]}
                            placeholder="Password"
                            required={true}
                            type="password"
                            value=""
                          />,
                          "className": "group",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 60,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "elementType": "button",
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 4,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": "Save",
                            "className": "btn btn-default btn-block",
                            "type": "submit",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": "Save",
                            "className": "btn btn-default btn-block",
                            "type": "submit",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <button
                            class="btn btn-default btn-block"
                            type="submit"
                          >
                            Save
                          </button>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "button",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="email"
                          placeholder="Email"
                          required=""
                          type="email"
                          value=""
                        />
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="username"
                        placeholder="Username"
                        required=""
                        type="text"
                        value=""
                      />
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="fullname"
                      placeholder="Names"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="fullname"
                        onChange={[Function]}
                        placeholder="Names"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>,
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="username"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>,
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="email"
                        onChange={[Function]}
                        placeholder="Email"
                        required={true}
                        type="email"
                        value=""
                      />
                    </div>,
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="password"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                        value=""
                      />
                    </div>,
                    <button
                      className="btn btn-default btn-block"
                      type="submit"
                    >
                      Save
                    </button>,
                  ],
                  "className": "form-area",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="fullname"
                        onChange={[Function]}
                        placeholder="Names"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>,
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="username"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>,
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="email"
                        onChange={[Function]}
                        placeholder="Email"
                        required={true}
                        type="email"
                        value=""
                      />
                    </div>,
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="password"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                        value=""
                      />
                    </div>,
                    <button
                      className="btn btn-default btn-block"
                      type="submit"
                    >
                      Save
                    </button>,
                  ],
                  "className": "form-area",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <div
                  class="form-area"
                >
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="fullname"
                      placeholder="Names"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="username"
                      placeholder="Username"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="email"
                      placeholder="Email"
                      required=""
                      type="email"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="password"
                      placeholder="Password"
                      required=""
                      type="password"
                      value=""
                    />
                  </div>
                  <button
                    class="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "stateNode": <div
                class="top"
              >
                <h3>
                  Register User
                </h3>
              </div>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "elementType": "form",
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <div
                  className="top"
                >
                  <h3>
                    Register User
                  </h3>
                </div>,
                <div
                  className="form-area"
                >
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="fullname"
                      onChange={[Function]}
                      placeholder="Names"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="username"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="email"
                      onChange={[Function]}
                      placeholder="Email"
                      required={true}
                      type="email"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="password"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                      value=""
                    />
                  </div>
                  <button
                    className="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>
                </div>,
              ],
              "onSubmit": [Function],
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <div
                  className="top"
                >
                  <h3>
                    Register User
                  </h3>
                </div>,
                <div
                  className="form-area"
                >
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="fullname"
                      onChange={[Function]}
                      placeholder="Names"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="username"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="email"
                      onChange={[Function]}
                      placeholder="Email"
                      required={true}
                      type="email"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="password"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                      value=""
                    />
                  </div>
                  <button
                    className="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>
                </div>,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <form>
              <div
                class="top"
              >
                <h3>
                  Register User
                </h3>
              </div>
              <div
                class="form-area"
              >
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="fullname"
                    placeholder="Names"
                    required=""
                    type="text"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="username"
                    placeholder="Username"
                    required=""
                    type="text"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="email"
                    placeholder="Email"
                    required=""
                    type="email"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="password"
                    placeholder="Password"
                    required=""
                    type="password"
                    value=""
                  />
                </div>
                <button
                  class="btn btn-default btn-block"
                  type="submit"
                >
                  Save
                </button>
              </div>
            </form>,
            "tag": 5,
            "treeBaseDuration": 0,
            "type": "form",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 0,
          "elementType": "div",
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "children": <form
              onSubmit={[Function]}
            >
              <div
                className="top"
              >
                <h3>
                  Register User
                </h3>
              </div>
              <div
                className="form-area"
              >
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="fullname"
                    onChange={[Function]}
                    placeholder="Names"
                    required={true}
                    type="text"
                    value=""
                  />
                </div>
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="username"
                    onChange={[Function]}
                    placeholder="Username"
                    required={true}
                    type="text"
                    value=""
                  />
                </div>
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="email"
                    onChange={[Function]}
                    placeholder="Email"
                    required={true}
                    type="email"
                    value=""
                  />
                </div>
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="password"
                    onChange={[Function]}
                    placeholder="Password"
                    required={true}
                    type="password"
                    value=""
                  />
                </div>
                <button
                  className="btn btn-default btn-block"
                  type="submit"
                >
                  Save
                </button>
              </div>
            </form>,
            "className": "login-form",
          },
          "memoizedState": null,
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "children": <form
              onSubmit={[Function]}
            >
              <div
                className="top"
              >
                <h3>
                  Register User
                </h3>
              </div>
              <div
                className="form-area"
              >
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="fullname"
                    onChange={[Function]}
                    placeholder="Names"
                    required={true}
                    type="text"
                    value=""
                  />
                </div>
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="username"
                    onChange={[Function]}
                    placeholder="Username"
                    required={true}
                    type="text"
                    value=""
                  />
                </div>
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="email"
                    onChange={[Function]}
                    placeholder="Email"
                    required={true}
                    type="email"
                    value=""
                  />
                </div>
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="password"
                    onChange={[Function]}
                    placeholder="Password"
                    required={true}
                    type="password"
                    value=""
                  />
                </div>
                <button
                  className="btn btn-default btn-block"
                  type="submit"
                >
                  Save
                </button>
              </div>
            </form>,
            "className": "login-form",
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": <div
            class="login-form"
          >
            <form>
              <div
                class="top"
              >
                <h3>
                  Register User
                </h3>
              </div>
              <div
                class="form-area"
              >
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="fullname"
                    placeholder="Names"
                    required=""
                    type="text"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="username"
                    placeholder="Username"
                    required=""
                    type="text"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="email"
                    placeholder="Email"
                    required=""
                    type="email"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="password"
                    placeholder="Password"
                    required=""
                    type="password"
                    value=""
                  />
                </div>
                <button
                  class="btn btn-default btn-block"
                  type="submit"
                >
                  Save
                </button>
              </div>
            </form>
          </div>,
          "tag": 5,
          "treeBaseDuration": 0,
          "type": "div",
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "effectTag": 1,
        "elementType": [Function],
        "expirationTime": 0,
        "firstContextDependency": null,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "RegisterUser": [MockFunction],
        },
        "memoizedState": Object {
          "email": "",
          "fullname": "",
          "password": "",
          "username": "",
        },
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "RegisterUser": [MockFunction],
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "RegisterUser": [MockFunction],
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "RegisterUser": [MockFunction],
            },
          },
          "mode": 0,
          "nextEffect": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login-form"
                  >
                    <form>
                      <div
                        class="top"
                      >
                        <h3>
                          Register User
                        </h3>
                      </div>
                      <div
                        class="form-area"
                      >
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="fullname"
                            placeholder="Names"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="username"
                            placeholder="Username"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />
                        </div>
                        <button
                          class="btn btn-default btn-block"
                          type="submit"
                        >
                          Save
                        </button>
                      </div>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "RegisterUser": [MockFunction],
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "RegisterUser": [MockFunction],
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "RegisterUser": [MockFunction],
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="login-form"
                >
                  <form>
                    <div
                      class="top"
                    >
                      <h3>
                        Register User
                      </h3>
                    </div>
                    <div
                      class="form-area"
                    >
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="fullname"
                          placeholder="Names"
                          required=""
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="username"
                          placeholder="Username"
                          required=""
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="email"
                          placeholder="Email"
                          required=""
                          type="email"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="password"
                          placeholder="Password"
                          required=""
                          type="password"
                          value=""
                        />
                      </div>
                      <button
                        class="btn btn-default btn-block"
                        type="submit"
                      >
                        Save
                      </button>
                    </div>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "RegisterUser": [MockFunction],
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "RegisterUser": [MockFunction],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": null,
              "expirationTime": 1073741823,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login-form"
                  >
                    <form>
                      <div
                        class="top"
                      >
                        <h3>
                          Register User
                        </h3>
                      </div>
                      <div
                        class="form-area"
                      >
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="fullname"
                            placeholder="Names"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="username"
                            placeholder="Username"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />
                        </div>
                        <button
                          class="btn btn-default btn-block"
                          type="submit"
                        >
                          Save
                        </button>
                      </div>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "RegisterUser": [MockFunction],
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1073741823,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                        Object {
                          "RegisterUser": [MockFunction],
                        }
                      }
                    />,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "elementType": null,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                  Object {
                    "RegisterUser": [MockFunction],
                  }
                }
              />,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                  class="login-form"
                >
                  <form>
                    <div
                      class="top"
                    >
                      <h3>
                        Register User
                      </h3>
                    </div>
                    <div
                      class="form-area"
                    >
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="fullname"
                          placeholder="Names"
                          required=""
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="username"
                          placeholder="Username"
                          required=""
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="email"
                          placeholder="Email"
                          required=""
                          type="email"
                          value=""
                        />
                      </div>
                      <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="password"
                          placeholder="Password"
                          required=""
                          type="password"
                          value=""
                        />
                      </div>
                      <button
                        class="btn btn-default btn-block"
                        type="submit"
                      >
                        Save
                      </button>
                    </div>
                  </form>
                </div>
              </div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "pingCache": null,
              "timeoutHandle": -1,
            },
            "tag": 3,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "RegisterUser": [MockFunction],
                    }
                  }
                />,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 1,
        "treeBaseDuration": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {},
      "onChange": [Function],
      "onSubmit": [Function],
      "props": Object {
        "RegisterUser": [MockFunction],
      },
      "refs": Object {},
      "state": Object {
        "email": "",
        "fullname": "",
        "password": "",
        "username": "",
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "RegisterUser": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="login-form"
      >
        <form>
          <div
            class="top"
          >
            <h3>
              Register User
            </h3>
          </div>
          <div
            class="form-area"
          >
            <div
              class="group"
            >
              <input
                class="form-control"
                name="fullname"
                placeholder="Names"
                required=""
                type="text"
                value=""
              />
            </div>
            <div
              class="group"
            >
              <input
                class="form-control"
                name="username"
                placeholder="Username"
                required=""
                type="text"
                value=""
              />
            </div>
            <div
              class="group"
            >
              <input
                class="form-control"
                name="email"
                placeholder="Email"
                required=""
                type="email"
                value=""
              />
            </div>
            <div
              class="group"
            >
              <input
                class="form-control"
                name="password"
                placeholder="Password"
                required=""
                type="password"
                value=""
              />
            </div>
            <button
              class="btn btn-default btn-block"
              type="submit"
            >
              Save
            </button>
          </div>
        </form>
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <form
          onSubmit={[Function]}
        >
          <div
            className="top"
          >
            <h3>
              Register User
            </h3>
          </div>
          <div
            className="form-area"
          >
            <div
              className="group"
            >
              <input
                className="form-control"
                name="fullname"
                onChange={[Function]}
                placeholder="Names"
                required={true}
                type="text"
                value=""
              />
            </div>
            <div
              className="group"
            >
              <input
                className="form-control"
                name="username"
                onChange={[Function]}
                placeholder="Username"
                required={true}
                type="text"
                value=""
              />
            </div>
            <div
              className="group"
            >
              <input
                className="form-control"
                name="email"
                onChange={[Function]}
                placeholder="Email"
                required={true}
                type="email"
                value=""
              />
            </div>
            <div
              className="group"
            >
              <input
                className="form-control"
                name="password"
                onChange={[Function]}
                placeholder="Password"
                required={true}
                type="password"
                value=""
              />
            </div>
            <button
              className="btn btn-default btn-block"
              type="submit"
            >
              Save
            </button>
          </div>
        </form>,
        "className": "login-form",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": <form>
            <div
              class="top"
            >
              <h3>
                Register User
              </h3>
            </div>
            <div
              class="form-area"
            >
              <div
                class="group"
              >
                <input
                  class="form-control"
                  name="fullname"
                  placeholder="Names"
                  required=""
                  type="text"
                  value=""
                />
              </div>
              <div
                class="group"
              >
                <input
                  class="form-control"
                  name="username"
                  placeholder="Username"
                  required=""
                  type="text"
                  value=""
                />
              </div>
              <div
                class="group"
              >
                <input
                  class="form-control"
                  name="email"
                  placeholder="Email"
                  required=""
                  type="email"
                  value=""
                />
              </div>
              <div
                class="group"
              >
                <input
                  class="form-control"
                  name="password"
                  placeholder="Password"
                  required=""
                  type="password"
                  value=""
                />
              </div>
              <button
                class="btn btn-default btn-block"
                type="submit"
              >
                Save
              </button>
            </div>
          </form>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="top"
              >
                <h3>
                  Register User
                </h3>
              </div>,
              <div
                className="form-area"
              >
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="fullname"
                    onChange={[Function]}
                    placeholder="Names"
                    required={true}
                    type="text"
                    value=""
                  />
                </div>
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="username"
                    onChange={[Function]}
                    placeholder="Username"
                    required={true}
                    type="text"
                    value=""
                  />
                </div>
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="email"
                    onChange={[Function]}
                    placeholder="Email"
                    required={true}
                    type="email"
                    value=""
                  />
                </div>
                <div
                  className="group"
                >
                  <input
                    className="form-control"
                    name="password"
                    onChange={[Function]}
                    placeholder="Password"
                    required={true}
                    type="password"
                    value=""
                  />
                </div>
                <button
                  className="btn btn-default btn-block"
                  type="submit"
                >
                  Save
                </button>
              </div>,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div
                class="top"
              >
                <h3>
                  Register User
                </h3>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <h3>
                  Register User
                </h3>,
                "className": "top",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <h3>
                    Register User
                  </h3>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Register User",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Register User",
                  ],
                  "type": "h3",
                },
              ],
              "type": "div",
            },
            Object {
              "instance": <div
                class="form-area"
              >
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="fullname"
                    placeholder="Names"
                    required=""
                    type="text"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="username"
                    placeholder="Username"
                    required=""
                    type="text"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="email"
                    placeholder="Email"
                    required=""
                    type="email"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="password"
                    placeholder="Password"
                    required=""
                    type="password"
                    value=""
                  />
                </div>
                <button
                  class="btn btn-default btn-block"
                  type="submit"
                >
                  Save
                </button>
              </div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="fullname"
                      onChange={[Function]}
                      placeholder="Names"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>,
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="username"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>,
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="email"
                      onChange={[Function]}
                      placeholder="Email"
                      required={true}
                      type="email"
                      value=""
                    />
                  </div>,
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="password"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                      value=""
                    />
                  </div>,
                  <button
                    className="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>,
                ],
                "className": "form-area",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="fullname"
                      placeholder="Names"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="form-control"
                      name="fullname"
                      onChange={[Function]}
                      placeholder="Names"
                      required={true}
                      type="text"
                      value=""
                    />,
                    "className": "group",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <input
                        class="form-control"
                        name="fullname"
                        placeholder="Names"
                        required=""
                        type="text"
                        value=""
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "form-control",
                        "name": "fullname",
                        "onChange": [Function],
                        "placeholder": "Names",
                        "required": true,
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="username"
                      placeholder="Username"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="form-control"
                      name="username"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                      type="text"
                      value=""
                    />,
                    "className": "group",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <input
                        class="form-control"
                        name="username"
                        placeholder="Username"
                        required=""
                        type="text"
                        value=""
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "form-control",
                        "name": "username",
                        "onChange": [Function],
                        "placeholder": "Username",
                        "required": true,
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="email"
                      placeholder="Email"
                      required=""
                      type="email"
                      value=""
                    />
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="form-control"
                      name="email"
                      onChange={[Function]}
                      placeholder="Email"
                      required={true}
                      type="email"
                      value=""
                    />,
                    "className": "group",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <input
                        class="form-control"
                        name="email"
                        placeholder="Email"
                        required=""
                        type="email"
                        value=""
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "form-control",
                        "name": "email",
                        "onChange": [Function],
                        "placeholder": "Email",
                        "required": true,
                        "type": "email",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="password"
                      placeholder="Password"
                      required=""
                      type="password"
                      value=""
                    />
                  </div>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <input
                      className="form-control"
                      name="password"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                      value=""
                    />,
                    "className": "group",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": <input
                        class="form-control"
                        name="password"
                        placeholder="Password"
                        required=""
                        type="password"
                        value=""
                      />,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "className": "form-control",
                        "name": "password",
                        "onChange": [Function],
                        "placeholder": "Password",
                        "required": true,
                        "type": "password",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": Array [
                        undefined,
                      ],
                      "type": "input",
                    },
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <button
                    class="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Save",
                    "className": "btn btn-default btn-block",
                    "type": "submit",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Save",
                  ],
                  "type": "button",
                },
              ],
              "type": "div",
            },
          ],
          "type": "form",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": Register {
        "_reactInternalFiber": FiberNode {
          "_debugID": 50,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="login-form"
                    >
                      <form>
                        <div
                          class="top"
                        >
                          <h3>
                            Register User
                          </h3>
                        </div>
                        <div
                          class="form-area"
                        >
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="fullname"
                              placeholder="Names"
                              required=""
                              type="text"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="username"
                              placeholder="Username"
                              required=""
                              type="text"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="email"
                              placeholder="Email"
                              required=""
                              type="email"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Password"
                              required=""
                              type="password"
                              value=""
                            />
                          </div>
                          <button
                            class="btn btn-default btn-block"
                            type="submit"
                          >
                            Save
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "RegisterUser": [MockFunction],
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "RegisterUser": [MockFunction],
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "RegisterUser": [MockFunction],
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login-form"
                  >
                    <form>
                      <div
                        class="top"
                      >
                        <h3>
                          Register User
                        </h3>
                      </div>
                      <div
                        class="form-area"
                      >
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="fullname"
                            placeholder="Names"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="username"
                            placeholder="Username"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />
                        </div>
                        <button
                          class="btn btn-default btn-block"
                          type="submit"
                        >
                          Save
                        </button>
                      </div>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "RegisterUser": [MockFunction],
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="login-form"
                    >
                      <form>
                        <div
                          class="top"
                        >
                          <h3>
                            Register User
                          </h3>
                        </div>
                        <div
                          class="form-area"
                        >
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="fullname"
                              placeholder="Names"
                              required=""
                              type="text"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="username"
                              placeholder="Username"
                              required=""
                              type="text"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="email"
                              placeholder="Email"
                              required=""
                              type="email"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Password"
                              required=""
                              type="password"
                              value=""
                            />
                          </div>
                          <button
                            class="btn btn-default btn-block"
                            type="submit"
                          >
                            Save
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "RegisterUser": [MockFunction],
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "RegisterUser": [MockFunction],
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "RegisterUser": [MockFunction],
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login-form"
                  >
                    <form>
                      <div
                        class="top"
                      >
                        <h3>
                          Register User
                        </h3>
                      </div>
                      <div
                        class="form-area"
                      >
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="fullname"
                            placeholder="Names"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="username"
                            placeholder="Username"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />
                        </div>
                        <button
                          class="btn btn-default btn-block"
                          type="submit"
                        >
                          Save
                        </button>
                      </div>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "RegisterUser": [MockFunction],
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "RegisterUser": [MockFunction],
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "RegisterUser": [MockFunction],
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 51,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 53,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 55,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "elementType": "h3",
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "Register User",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "Register User",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <h3>
                    Register User
                  </h3>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "h3",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": "div",
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": <h3>
                    Register User
                  </h3>,
                  "className": "top",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": <h3>
                    Register User
                  </h3>,
                  "className": "top",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 54,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": FiberNode {
                      "_debugID": 61,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "elementType": "input",
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 0,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "className": "form-control",
                        "name": "fullname",
                        "onChange": [Function],
                        "placeholder": "Names",
                        "required": true,
                        "type": "text",
                        "value": "",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "className": "form-control",
                        "name": "fullname",
                        "onChange": [Function],
                        "placeholder": "Names",
                        "required": true,
                        "type": "text",
                        "value": "",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": <input
                        class="form-control"
                        name="fullname"
                        placeholder="Names"
                        required=""
                        type="text"
                        value=""
                      />,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "input",
                      "updateQueue": null,
                    },
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "elementType": "div",
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": <input
                        className="form-control"
                        name="fullname"
                        onChange={[Function]}
                        placeholder="Names"
                        required={true}
                        type="text"
                        value=""
                      />,
                      "className": "group",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": <input
                        className="form-control"
                        name="fullname"
                        onChange={[Function]}
                        placeholder="Names"
                        required={true}
                        type="text"
                        value=""
                      />,
                      "className": "group",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 57,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": [Circular],
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": FiberNode {
                        "_debugID": 62,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": null,
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "elementType": "input",
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 0,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "className": "form-control",
                          "name": "username",
                          "onChange": [Function],
                          "placeholder": "Username",
                          "required": true,
                          "type": "text",
                          "value": "",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "className": "form-control",
                          "name": "username",
                          "onChange": [Function],
                          "placeholder": "Username",
                          "required": true,
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": null,
                        "stateNode": <input
                          class="form-control"
                          name="username"
                          placeholder="Username"
                          required=""
                          type="text"
                          value=""
                        />,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "input",
                        "updateQueue": null,
                      },
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "elementType": "div",
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 1,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Object {
                        "children": <input
                          className="form-control"
                          name="username"
                          onChange={[Function]}
                          placeholder="Username"
                          required={true}
                          type="text"
                          value=""
                        />,
                        "className": "group",
                      },
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Object {
                        "children": <input
                          className="form-control"
                          name="username"
                          onChange={[Function]}
                          placeholder="Username"
                          required={true}
                          type="text"
                          value=""
                        />,
                        "className": "group",
                      },
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": FiberNode {
                        "_debugID": 58,
                        "_debugIsCurrentlyTiming": false,
                        "_debugOwner": [Circular],
                        "_debugSource": null,
                        "actualDuration": 0,
                        "actualStartTime": -1,
                        "alternate": null,
                        "child": FiberNode {
                          "_debugID": 63,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": null,
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "elementType": "input",
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 0,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "className": "form-control",
                            "name": "email",
                            "onChange": [Function],
                            "placeholder": "Email",
                            "required": true,
                            "type": "email",
                            "value": "",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "className": "form-control",
                            "name": "email",
                            "onChange": [Function],
                            "placeholder": "Email",
                            "required": true,
                            "type": "email",
                            "value": "",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": null,
                          "stateNode": <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "input",
                          "updateQueue": null,
                        },
                        "childExpirationTime": 0,
                        "effectTag": 0,
                        "elementType": "div",
                        "expirationTime": 0,
                        "firstContextDependency": null,
                        "firstEffect": null,
                        "index": 2,
                        "key": null,
                        "lastEffect": null,
                        "memoizedProps": Object {
                          "children": <input
                            className="form-control"
                            name="email"
                            onChange={[Function]}
                            placeholder="Email"
                            required={true}
                            type="email"
                            value=""
                          />,
                          "className": "group",
                        },
                        "memoizedState": null,
                        "mode": 0,
                        "nextEffect": null,
                        "pendingProps": Object {
                          "children": <input
                            className="form-control"
                            name="email"
                            onChange={[Function]}
                            placeholder="Email"
                            required={true}
                            type="email"
                            value=""
                          />,
                          "className": "group",
                        },
                        "ref": null,
                        "return": [Circular],
                        "selfBaseDuration": 0,
                        "sibling": FiberNode {
                          "_debugID": 59,
                          "_debugIsCurrentlyTiming": false,
                          "_debugOwner": [Circular],
                          "_debugSource": null,
                          "actualDuration": 0,
                          "actualStartTime": -1,
                          "alternate": null,
                          "child": FiberNode {
                            "_debugID": 64,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "elementType": "input",
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 0,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "className": "form-control",
                              "name": "password",
                              "onChange": [Function],
                              "placeholder": "Password",
                              "required": true,
                              "type": "password",
                              "value": "",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "className": "form-control",
                              "name": "password",
                              "onChange": [Function],
                              "placeholder": "Password",
                              "required": true,
                              "type": "password",
                              "value": "",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <input
                              class="form-control"
                              name="password"
                              placeholder="Password"
                              required=""
                              type="password"
                              value=""
                            />,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "input",
                            "updateQueue": null,
                          },
                          "childExpirationTime": 0,
                          "effectTag": 0,
                          "elementType": "div",
                          "expirationTime": 0,
                          "firstContextDependency": null,
                          "firstEffect": null,
                          "index": 3,
                          "key": null,
                          "lastEffect": null,
                          "memoizedProps": Object {
                            "children": <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Password"
                              required={true}
                              type="password"
                              value=""
                            />,
                            "className": "group",
                          },
                          "memoizedState": null,
                          "mode": 0,
                          "nextEffect": null,
                          "pendingProps": Object {
                            "children": <input
                              className="form-control"
                              name="password"
                              onChange={[Function]}
                              placeholder="Password"
                              required={true}
                              type="password"
                              value=""
                            />,
                            "className": "group",
                          },
                          "ref": null,
                          "return": [Circular],
                          "selfBaseDuration": 0,
                          "sibling": FiberNode {
                            "_debugID": 60,
                            "_debugIsCurrentlyTiming": false,
                            "_debugOwner": [Circular],
                            "_debugSource": null,
                            "actualDuration": 0,
                            "actualStartTime": -1,
                            "alternate": null,
                            "child": null,
                            "childExpirationTime": 0,
                            "effectTag": 0,
                            "elementType": "button",
                            "expirationTime": 0,
                            "firstContextDependency": null,
                            "firstEffect": null,
                            "index": 4,
                            "key": null,
                            "lastEffect": null,
                            "memoizedProps": Object {
                              "children": "Save",
                              "className": "btn btn-default btn-block",
                              "type": "submit",
                            },
                            "memoizedState": null,
                            "mode": 0,
                            "nextEffect": null,
                            "pendingProps": Object {
                              "children": "Save",
                              "className": "btn btn-default btn-block",
                              "type": "submit",
                            },
                            "ref": null,
                            "return": [Circular],
                            "selfBaseDuration": 0,
                            "sibling": null,
                            "stateNode": <button
                              class="btn btn-default btn-block"
                              type="submit"
                            >
                              Save
                            </button>,
                            "tag": 5,
                            "treeBaseDuration": 0,
                            "type": "button",
                            "updateQueue": null,
                          },
                          "stateNode": <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Password"
                              required=""
                              type="password"
                              value=""
                            />
                          </div>,
                          "tag": 5,
                          "treeBaseDuration": 0,
                          "type": "div",
                          "updateQueue": null,
                        },
                        "stateNode": <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />
                        </div>,
                        "tag": 5,
                        "treeBaseDuration": 0,
                        "type": "div",
                        "updateQueue": null,
                      },
                      "stateNode": <div
                        class="group"
                      >
                        <input
                          class="form-control"
                          name="username"
                          placeholder="Username"
                          required=""
                          type="text"
                          value=""
                        />
                      </div>,
                      "tag": 5,
                      "treeBaseDuration": 0,
                      "type": "div",
                      "updateQueue": null,
                    },
                    "stateNode": <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="fullname"
                        placeholder="Names"
                        required=""
                        type="text"
                        value=""
                      />
                    </div>,
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": "div",
                    "updateQueue": null,
                  },
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "elementType": "div",
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": Array [
                      <div
                        className="group"
                      >
                        <input
                          className="form-control"
                          name="fullname"
                          onChange={[Function]}
                          placeholder="Names"
                          required={true}
                          type="text"
                          value=""
                        />
                      </div>,
                      <div
                        className="group"
                      >
                        <input
                          className="form-control"
                          name="username"
                          onChange={[Function]}
                          placeholder="Username"
                          required={true}
                          type="text"
                          value=""
                        />
                      </div>,
                      <div
                        className="group"
                      >
                        <input
                          className="form-control"
                          name="email"
                          onChange={[Function]}
                          placeholder="Email"
                          required={true}
                          type="email"
                          value=""
                        />
                      </div>,
                      <div
                        className="group"
                      >
                        <input
                          className="form-control"
                          name="password"
                          onChange={[Function]}
                          placeholder="Password"
                          required={true}
                          type="password"
                          value=""
                        />
                      </div>,
                      <button
                        className="btn btn-default btn-block"
                        type="submit"
                      >
                        Save
                      </button>,
                    ],
                    "className": "form-area",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": Array [
                      <div
                        className="group"
                      >
                        <input
                          className="form-control"
                          name="fullname"
                          onChange={[Function]}
                          placeholder="Names"
                          required={true}
                          type="text"
                          value=""
                        />
                      </div>,
                      <div
                        className="group"
                      >
                        <input
                          className="form-control"
                          name="username"
                          onChange={[Function]}
                          placeholder="Username"
                          required={true}
                          type="text"
                          value=""
                        />
                      </div>,
                      <div
                        className="group"
                      >
                        <input
                          className="form-control"
                          name="email"
                          onChange={[Function]}
                          placeholder="Email"
                          required={true}
                          type="email"
                          value=""
                        />
                      </div>,
                      <div
                        className="group"
                      >
                        <input
                          className="form-control"
                          name="password"
                          onChange={[Function]}
                          placeholder="Password"
                          required={true}
                          type="password"
                          value=""
                        />
                      </div>,
                      <button
                        className="btn btn-default btn-block"
                        type="submit"
                      >
                        Save
                      </button>,
                    ],
                    "className": "form-area",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <div
                    class="form-area"
                  >
                    <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="fullname"
                        placeholder="Names"
                        required=""
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="username"
                        placeholder="Username"
                        required=""
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="email"
                        placeholder="Email"
                        required=""
                        type="email"
                        value=""
                      />
                    </div>
                    <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="password"
                        placeholder="Password"
                        required=""
                        type="password"
                        value=""
                      />
                    </div>
                    <button
                      class="btn btn-default btn-block"
                      type="submit"
                    >
                      Save
                    </button>
                  </div>,
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="top"
                >
                  <h3>
                    Register User
                  </h3>
                </div>,
                "tag": 5,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "elementType": "form",
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div
                    className="top"
                  >
                    <h3>
                      Register User
                    </h3>
                  </div>,
                  <div
                    className="form-area"
                  >
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="fullname"
                        onChange={[Function]}
                        placeholder="Names"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="username"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="email"
                        onChange={[Function]}
                        placeholder="Email"
                        required={true}
                        type="email"
                        value=""
                      />
                    </div>
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="password"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                        value=""
                      />
                    </div>
                    <button
                      className="btn btn-default btn-block"
                      type="submit"
                    >
                      Save
                    </button>
                  </div>,
                ],
                "onSubmit": [Function],
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div
                    className="top"
                  >
                    <h3>
                      Register User
                    </h3>
                  </div>,
                  <div
                    className="form-area"
                  >
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="fullname"
                        onChange={[Function]}
                        placeholder="Names"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="username"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="email"
                        onChange={[Function]}
                        placeholder="Email"
                        required={true}
                        type="email"
                        value=""
                      />
                    </div>
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="password"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                        value=""
                      />
                    </div>
                    <button
                      className="btn btn-default btn-block"
                      type="submit"
                    >
                      Save
                    </button>
                  </div>,
                ],
                "onSubmit": [Function],
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <form>
                <div
                  class="top"
                >
                  <h3>
                    Register User
                  </h3>
                </div>
                <div
                  class="form-area"
                >
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="fullname"
                      placeholder="Names"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="username"
                      placeholder="Username"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="email"
                      placeholder="Email"
                      required=""
                      type="email"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="password"
                      placeholder="Password"
                      required=""
                      type="password"
                      value=""
                    />
                  </div>
                  <button
                    class="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>
                </div>
              </form>,
              "tag": 5,
              "treeBaseDuration": 0,
              "type": "form",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "elementType": "div",
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": <form
                onSubmit={[Function]}
              >
                <div
                  className="top"
                >
                  <h3>
                    Register User
                  </h3>
                </div>
                <div
                  className="form-area"
                >
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="fullname"
                      onChange={[Function]}
                      placeholder="Names"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="username"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="email"
                      onChange={[Function]}
                      placeholder="Email"
                      required={true}
                      type="email"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="password"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                      value=""
                    />
                  </div>
                  <button
                    className="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>
                </div>
              </form>,
              "className": "login-form",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": <form
                onSubmit={[Function]}
              >
                <div
                  className="top"
                >
                  <h3>
                    Register User
                  </h3>
                </div>
                <div
                  className="form-area"
                >
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="fullname"
                      onChange={[Function]}
                      placeholder="Names"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="username"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="email"
                      onChange={[Function]}
                      placeholder="Email"
                      required={true}
                      type="email"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="password"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                      value=""
                    />
                  </div>
                  <button
                    className="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>
                </div>
              </form>,
              "className": "login-form",
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <div
              class="login-form"
            >
              <form>
                <div
                  class="top"
                >
                  <h3>
                    Register User
                  </h3>
                </div>
                <div
                  class="form-area"
                >
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="fullname"
                      placeholder="Names"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="username"
                      placeholder="Username"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="email"
                      placeholder="Email"
                      required=""
                      type="email"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="password"
                      placeholder="Password"
                      required=""
                      type="password"
                      value=""
                    />
                  </div>
                  <button
                    class="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>
                </div>
              </form>
            </div>,
            "tag": 5,
            "treeBaseDuration": 0,
            "type": "div",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 1,
          "elementType": [Function],
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "RegisterUser": [MockFunction],
          },
          "memoizedState": Object {
            "email": "",
            "fullname": "",
            "password": "",
            "username": "",
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "RegisterUser": [MockFunction],
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "elementType": [Function],
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "mode": 0,
            "nextEffect": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="login-form"
                    >
                      <form>
                        <div
                          class="top"
                        >
                          <h3>
                            Register User
                          </h3>
                        </div>
                        <div
                          class="form-area"
                        >
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="fullname"
                              placeholder="Names"
                              required=""
                              type="text"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="username"
                              placeholder="Username"
                              required=""
                              type="text"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="email"
                              placeholder="Email"
                              required=""
                              type="email"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Password"
                              required=""
                              type="password"
                              value=""
                            />
                          </div>
                          <button
                            class="btn btn-default btn-block"
                            type="submit"
                          >
                            Save
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "RegisterUser": [MockFunction],
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "RegisterUser": [MockFunction],
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "RegisterUser": [MockFunction],
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login-form"
                  >
                    <form>
                      <div
                        class="top"
                      >
                        <h3>
                          Register User
                        </h3>
                      </div>
                      <div
                        class="form-area"
                      >
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="fullname"
                            placeholder="Names"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="username"
                            placeholder="Username"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />
                        </div>
                        <button
                          class="btn btn-default btn-block"
                          type="submit"
                        >
                          Save
                        </button>
                      </div>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "RegisterUser": [MockFunction],
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "RegisterUser": [MockFunction],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "elementType": null,
                "expirationTime": 1073741823,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                      class="login-form"
                    >
                      <form>
                        <div
                          class="top"
                        >
                          <h3>
                            Register User
                          </h3>
                        </div>
                        <div
                          class="form-area"
                        >
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="fullname"
                              placeholder="Names"
                              required=""
                              type="text"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="username"
                              placeholder="Username"
                              required=""
                              type="text"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="email"
                              placeholder="Email"
                              required=""
                              type="email"
                              value=""
                            />
                          </div>
                          <div
                            class="group"
                          >
                            <input
                              class="form-control"
                              name="password"
                              placeholder="Password"
                              required=""
                              type="password"
                              value=""
                            />
                          </div>
                          <button
                            class="btn btn-default btn-block"
                            type="submit"
                          >
                            Save
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "pingCache": null,
                  "timeoutHandle": -1,
                },
                "tag": 3,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "RegisterUser": [MockFunction],
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1073741823,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                          Object {
                            "RegisterUser": [MockFunction],
                          }
                        }
                      />,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "elementType": null,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                    Object {
                      "RegisterUser": [MockFunction],
                    }
                  }
                />,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                    class="login-form"
                  >
                    <form>
                      <div
                        class="top"
                      >
                        <h3>
                          Register User
                        </h3>
                      </div>
                      <div
                        class="form-area"
                      >
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="fullname"
                            placeholder="Names"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="username"
                            placeholder="Username"
                            required=""
                            type="text"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="email"
                            placeholder="Email"
                            required=""
                            type="email"
                            value=""
                          />
                        </div>
                        <div
                          class="group"
                        >
                          <input
                            class="form-control"
                            name="password"
                            placeholder="Password"
                            required=""
                            type="password"
                            value=""
                          />
                        </div>
                        <button
                          class="btn btn-default btn-block"
                          type="submit"
                        >
                          Save
                        </button>
                      </div>
                    </form>
                  </div>
                </div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "pingCache": null,
                "timeoutHandle": -1,
              },
              "tag": 3,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                      Object {
                        "RegisterUser": [MockFunction],
                      }
                    }
                  />,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "RegisterUser": [MockFunction],
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "RegisterUser": [MockFunction],
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 1,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 1,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "onChange": [Function],
        "onSubmit": [Function],
        "props": Object {
          "RegisterUser": [MockFunction],
        },
        "refs": Object {},
        "state": Object {
          "email": "",
          "fullname": "",
          "password": "",
          "username": "",
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "RegisterUser": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="login-form"
        >
          <form>
            <div
              class="top"
            >
              <h3>
                Register User
              </h3>
            </div>
            <div
              class="form-area"
            >
              <div
                class="group"
              >
                <input
                  class="form-control"
                  name="fullname"
                  placeholder="Names"
                  required=""
                  type="text"
                  value=""
                />
              </div>
              <div
                class="group"
              >
                <input
                  class="form-control"
                  name="username"
                  placeholder="Username"
                  required=""
                  type="text"
                  value=""
                />
              </div>
              <div
                class="group"
              >
                <input
                  class="form-control"
                  name="email"
                  placeholder="Email"
                  required=""
                  type="email"
                  value=""
                />
              </div>
              <div
                class="group"
              >
                <input
                  class="form-control"
                  name="password"
                  placeholder="Password"
                  required=""
                  type="password"
                  value=""
                />
              </div>
              <button
                class="btn btn-default btn-block"
                type="submit"
              >
                Save
              </button>
            </div>
          </form>
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <form
            onSubmit={[Function]}
          >
            <div
              className="top"
            >
              <h3>
                Register User
              </h3>
            </div>
            <div
              className="form-area"
            >
              <div
                className="group"
              >
                <input
                  className="form-control"
                  name="fullname"
                  onChange={[Function]}
                  placeholder="Names"
                  required={true}
                  type="text"
                  value=""
                />
              </div>
              <div
                className="group"
              >
                <input
                  className="form-control"
                  name="username"
                  onChange={[Function]}
                  placeholder="Username"
                  required={true}
                  type="text"
                  value=""
                />
              </div>
              <div
                className="group"
              >
                <input
                  className="form-control"
                  name="email"
                  onChange={[Function]}
                  placeholder="Email"
                  required={true}
                  type="email"
                  value=""
                />
              </div>
              <div
                className="group"
              >
                <input
                  className="form-control"
                  name="password"
                  onChange={[Function]}
                  placeholder="Password"
                  required={true}
                  type="password"
                  value=""
                />
              </div>
              <button
                className="btn btn-default btn-block"
                type="submit"
              >
                Save
              </button>
            </div>
          </form>,
          "className": "login-form",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <form>
              <div
                class="top"
              >
                <h3>
                  Register User
                </h3>
              </div>
              <div
                class="form-area"
              >
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="fullname"
                    placeholder="Names"
                    required=""
                    type="text"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="username"
                    placeholder="Username"
                    required=""
                    type="text"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="email"
                    placeholder="Email"
                    required=""
                    type="email"
                    value=""
                  />
                </div>
                <div
                  class="group"
                >
                  <input
                    class="form-control"
                    name="password"
                    placeholder="Password"
                    required=""
                    type="password"
                    value=""
                  />
                </div>
                <button
                  class="btn btn-default btn-block"
                  type="submit"
                >
                  Save
                </button>
              </div>
            </form>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="top"
                >
                  <h3>
                    Register User
                  </h3>
                </div>,
                <div
                  className="form-area"
                >
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="fullname"
                      onChange={[Function]}
                      placeholder="Names"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="username"
                      onChange={[Function]}
                      placeholder="Username"
                      required={true}
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="email"
                      onChange={[Function]}
                      placeholder="Email"
                      required={true}
                      type="email"
                      value=""
                    />
                  </div>
                  <div
                    className="group"
                  >
                    <input
                      className="form-control"
                      name="password"
                      onChange={[Function]}
                      placeholder="Password"
                      required={true}
                      type="password"
                      value=""
                    />
                  </div>
                  <button
                    className="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>
                </div>,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div
                  class="top"
                >
                  <h3>
                    Register User
                  </h3>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <h3>
                    Register User
                  </h3>,
                  "className": "top",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <h3>
                      Register User
                    </h3>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Register User",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Register User",
                    ],
                    "type": "h3",
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": <div
                  class="form-area"
                >
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="fullname"
                      placeholder="Names"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="username"
                      placeholder="Username"
                      required=""
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="email"
                      placeholder="Email"
                      required=""
                      type="email"
                      value=""
                    />
                  </div>
                  <div
                    class="group"
                  >
                    <input
                      class="form-control"
                      name="password"
                      placeholder="Password"
                      required=""
                      type="password"
                      value=""
                    />
                  </div>
                  <button
                    class="btn btn-default btn-block"
                    type="submit"
                  >
                    Save
                  </button>
                </div>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="fullname"
                        onChange={[Function]}
                        placeholder="Names"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>,
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="username"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                        type="text"
                        value=""
                      />
                    </div>,
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="email"
                        onChange={[Function]}
                        placeholder="Email"
                        required={true}
                        type="email"
                        value=""
                      />
                    </div>,
                    <div
                      className="group"
                    >
                      <input
                        className="form-control"
                        name="password"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                        value=""
                      />
                    </div>,
                    <button
                      className="btn btn-default btn-block"
                      type="submit"
                    >
                      Save
                    </button>,
                  ],
                  "className": "form-area",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="fullname"
                        placeholder="Names"
                        required=""
                        type="text"
                        value=""
                      />
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <input
                        className="form-control"
                        name="fullname"
                        onChange={[Function]}
                        placeholder="Names"
                        required={true}
                        type="text"
                        value=""
                      />,
                      "className": "group",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <input
                          class="form-control"
                          name="fullname"
                          placeholder="Names"
                          required=""
                          type="text"
                          value=""
                        />,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "form-control",
                          "name": "fullname",
                          "onChange": [Function],
                          "placeholder": "Names",
                          "required": true,
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": Array [
                          undefined,
                        ],
                        "type": "input",
                      },
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="username"
                        placeholder="Username"
                        required=""
                        type="text"
                        value=""
                      />
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <input
                        className="form-control"
                        name="username"
                        onChange={[Function]}
                        placeholder="Username"
                        required={true}
                        type="text"
                        value=""
                      />,
                      "className": "group",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <input
                          class="form-control"
                          name="username"
                          placeholder="Username"
                          required=""
                          type="text"
                          value=""
                        />,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "form-control",
                          "name": "username",
                          "onChange": [Function],
                          "placeholder": "Username",
                          "required": true,
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": Array [
                          undefined,
                        ],
                        "type": "input",
                      },
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="email"
                        placeholder="Email"
                        required=""
                        type="email"
                        value=""
                      />
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <input
                        className="form-control"
                        name="email"
                        onChange={[Function]}
                        placeholder="Email"
                        required={true}
                        type="email"
                        value=""
                      />,
                      "className": "group",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <input
                          class="form-control"
                          name="email"
                          placeholder="Email"
                          required=""
                          type="email"
                          value=""
                        />,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "form-control",
                          "name": "email",
                          "onChange": [Function],
                          "placeholder": "Email",
                          "required": true,
                          "type": "email",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": Array [
                          undefined,
                        ],
                        "type": "input",
                      },
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": <div
                      class="group"
                    >
                      <input
                        class="form-control"
                        name="password"
                        placeholder="Password"
                        required=""
                        type="password"
                        value=""
                      />
                    </div>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": <input
                        className="form-control"
                        name="password"
                        onChange={[Function]}
                        placeholder="Password"
                        required={true}
                        type="password"
                        value=""
                      />,
                      "className": "group",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": <input
                          class="form-control"
                          name="password"
                          placeholder="Password"
                          required=""
                          type="password"
                          value=""
                        />,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "form-control",
                          "name": "password",
                          "onChange": [Function],
                          "placeholder": "Password",
                          "required": true,
                          "type": "password",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": Array [
                          undefined,
                        ],
                        "type": "input",
                      },
                    ],
                    "type": "div",
                  },
                  Object {
                    "instance": <button
                      class="btn btn-default btn-block"
                      type="submit"
                    >
                      Save
                    </button>,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Save",
                      "className": "btn btn-default btn-block",
                      "type": "submit",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Save",
                    ],
                    "type": "button",
                  },
                ],
                "type": "div",
              },
            ],
            "type": "form",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
